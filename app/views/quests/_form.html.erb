<%
  bounty  = @quest.bounty.to_s(:currency => false, :thousands_separators => false, :cents => false)
%>

<%= form_for @quest do |form| %>
  <p class="legend"><%= i18n_legend_for(@quest, :count => Quest::NUMBER_OF_CRITERIA) %></p>
  <%= form.error_messages %>

  <%= form.control_group :bounty, :class => "input-small", :unit => "â‚¬", :value => bounty, :autocomplete => "off" %>
  <%= form.control_group :category,     :select,    :select_options => categories_select_options %>
  <%= form.control_group :title,        :text_area, :rows => 2 %>
  <%= form.control_group :description,  :text_area, :rows => 6, :class => "tinymce" %>
  
  <div class="criteria">
    <% Quest.criteria_titles.each_with_index do |name, idx| %>
      <div class="criterium-group">
        <%= form.control_group name, :text_area, :rows => 2, :hint => I18n.t("quest.form.field_hint.criteria") %>
        <%#= form.control_group Quest.criteria_descriptions[idx], :text_area, :rows => 3, :hint => I18n.t("quest.form.field_hint.criteria_description") %>
      </div>
    <% end %>
  </div>
  
  <%= form.control_group :images, :filepicker, :multiple => true %>
  
  <%= form.control_group :duration_in_days, :radio_button, :hint => false do
      Quest::DURATIONS_IN_DAYS.map do |value|
        label :class => "radio" do
          form.radio_button(:duration_in_days, value, :checked => ((@quest.duration_in_days || Quest::DEFAULT_DURATION_IN_DAYS).to_i == value)) +
          I18n.t('quest.form.field_hint.duration', :count => value)
        end
      end.join.html_safe
  end %>
  
  <div class="location">
    <%= form.restrict_location %>
    <div id="location_fields" class="<%= @quest.restrict_location? ? '' : 'hide' %>">
      <%= form.fields_for(:location, @quest.location) do |location_form| %>
        <%= partial 'locations/form', :form => location_form %>
      <% end %>
    </div>
  </div>
  
  <%= form.actions quests_path %>
<% end %>

<script type="text/javascript" charset="utf-8">
  // toggles location restriction
  $("#quest_restrict_location").change(function() {
    if($(this).is(':checked')) {
      $("#location_fields").slideDown('hide');
      google.maps.event.trigger(map, 'resize');
      marker.setPosition(map.getCenter());
    } else {
      $("#location_fields").slideUp('hide');
    }
  });
  <% if @quest.restrict_location? %>
    $("#quest_restrict_location").trigger('click');
  <% end %>


  (function($) {
    /*
        Hide all criterium groups that have no value in its input 
        nodes except the first one.
     */
    var count = 0;
    $(".criterium-group").each(function() {
      // array with true entries when there is input.
      var inputsHaveVals = jQuery.map($("textarea", this), function(input) {
        return $(input).val() !== "" ? true : false;
      });

      var visible = (jQuery.inArray(true, inputsHaveVals) != -1) ||
        (count++ == 0);

      if(!visible)
        $(this).hide();
    });
    
    /*
        Whenever a criterium grou gets focus we are showing the next 
        criterium group already: the user might want to enter some data
        there.
     */
    $(".criterium-group textarea").focus(function() {
      $(this).closest(".criterium-group").
        next(".criterium-group").show();
    });
    
  })(jQuery);
</script>

<%= tinymce %>